{
  "openapi": "3.0.3",
  "info": {
    "title": "UMEI API Specification",
    "description": "Specification for UMEI FMO API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:8080"
    }
  ],
  "paths": {
    "/AssetPortfolios": {
      "get": {
        "tags": [
          "AssetPortfolio"
        ],
        "summary": "List or search AssetPortfolios",
        "operationId": "AssetPortfolio_Search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolioSearchResult"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolioSearchResult"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolioSearchResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolioSearchResult"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolioSearchResult"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolioSearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolioSearchResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AssetPortfolio"
        ],
        "summary": "Create a new AssetPortfolio",
        "operationId": "AssetPortfolio_Create",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              }
            }
          }
        }
      }
    },
    "/AssetPortfolios/{id}": {
      "get": {
        "tags": [
          "AssetPortfolio"
        ],
        "summary": "Get an existing AssetPortfolio by id",
        "operationId": "AssetPortfolio_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AssetPortfolio"
        ],
        "summary": "Update an existing AssetPortfolio",
        "operationId": "AssetPortfolio_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "AssetPortfolio"
        ],
        "summary": "Patch / partially update an existing AssetPortfolio",
        "operationId": "AssetPortfolio_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPortfolio"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPortfolio"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AssetPortfolio"
        ],
        "summary": "Delete/Remove an existing AssetPortfolio",
        "operationId": "AssetPortfolio_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/BaselineIntervals": {
      "get": {
        "tags": [
          "BaselineInterval"
        ],
        "summary": "List or search BaselineIntervals",
        "operationId": "BaselineInterval_Search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineIntervalSearchResult"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineIntervalSearchResult"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineIntervalSearchResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineIntervalSearchResult"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineIntervalSearchResult"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineIntervalSearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineIntervalSearchResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "BaselineInterval"
        ],
        "summary": "Create a new BaselineInterval",
        "operationId": "BaselineInterval_Create_Single",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          }
        }
      }
    },
    "/BaselineIntervals/{id}": {
      "get": {
        "tags": [
          "BaselineInterval"
        ],
        "summary": "Get an existing BaselineInterval by id",
        "operationId": "BaselineInterval_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "BaselineInterval"
        ],
        "summary": "Update an existing BaselineInterval",
        "operationId": "BaselineInterval_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "BaselineInterval"
        ],
        "summary": "Patch / partially update an existing BaselineInterval",
        "operationId": "BaselineInterval_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BaseLineInterval"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseLineInterval"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BaselineInterval"
        ],
        "summary": "Delete/Remove an existing BaselineInterval",
        "operationId": "BaselineInterval_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/GridNodes/grid": {
      "get": {
        "tags": [
          "GridNode"
        ],
        "summary": "Get grid hierarchy",
        "operationId": "GridNode_GetGrid",
        "parameters": [
          {
            "name": "marketId",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeNode"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeNode"
                  }
                }
              },
              "application/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeNode"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeNode"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeNode"
                  }
                }
              },
              "application/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeNode"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeNode"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MeterReadings/{id}": {
      "get": {
        "tags": [
          "MeterReading"
        ],
        "summary": "Get an existing MeterReading by id",
        "operationId": "MeterReading_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "MeterReading"
        ],
        "summary": "Update an existing MeterReading",
        "operationId": "MeterReading_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "MeterReading"
        ],
        "summary": "Patch / partially update an existing MeterReading",
        "operationId": "MeterReading_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MeterReading"
        ],
        "summary": "Delete/Remove an existing MeterReading",
        "operationId": "MeterReading_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/MeterReadings": {
      "post": {
        "tags": [
          "MeterReading"
        ],
        "summary": "Create a new MeterReading",
        "operationId": "MeterReading_Create",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReading"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MeterReading"
        ],
        "summary": "Delete/Remove an existing MeterReading",
        "operationId": "MeterReading_Delete",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "MeterReading"
        ],
        "summary": "List or search MeterReadings",
        "operationId": "MeterReading_Search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingSearchResult"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingSearchResult"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingSearchResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingSearchResult"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingSearchResult"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingSearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingSearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/MeterReadings/create-multiple": {
      "post": {
        "tags": [
          "MeterReading"
        ],
        "operationId": "MeterReading_CreateMultiple",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeterReading"
                },
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeterReading"
                },
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeterReading"
                },
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeterReading"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/MeterReadings/from-source": {
      "get": {
        "tags": [
          "MeterReading"
        ],
        "operationId": "MeterReading_GetMeterReadings",
        "parameters": [
          {
            "name": "assetPortfolioId",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "periodFromInclusive",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "periodToExclusive",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                }
              },
              "application/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                }
              },
              "application/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MeterReadings/import": {
      "post": {
        "tags": [
          "MeterReading"
        ],
        "operationId": "MeterReading_Import",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Orders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "List or search Orders",
        "operationId": "Order_Search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSearchResult"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSearchResult"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSearchResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSearchResult"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSearchResult"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSearchResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create a new Order",
        "operationId": "Order_Create",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/Orders/{id}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get an existing Order by id",
        "operationId": "Order_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update an existing Order",
        "operationId": "Order_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Order"
        ],
        "summary": "Patching an orders price/quantity will cancel the order and create a new one, see response headers",
        "operationId": "Order_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete/Remove an existing Order",
        "operationId": "Order_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Trades": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "List or search Trades",
        "operationId": "Trade_Search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
            "schema": {
              "type": "integer",
              "description": "Number of hits to return. \r\nIf client does not specify Take the server MAY apply a default Take value\r\n(which will be returned in the SearchResult object).\r\nThe default value is not guaranteed to be the same for different requests\"",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeSearchResult"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/TradeSearchResult"
                }
              },
              "application/html": {
                "schema": {
                  "$ref": "#/components/schemas/TradeSearchResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TradeSearchResult"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/TradeSearchResult"
                }
              },
              "application/csv": {
                "schema": {
                  "$ref": "#/components/schemas/TradeSearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeSearchResult"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Link": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BaseLineInterval": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this item",
            "nullable": false
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": false,
            "readOnly": true
          },
          "assetPortfolioId": {
            "type": "string",
            "nullable": false
          },
          "periodFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "periodTo": {
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "energyProduction": {
            "type": "number",
            "description": "Total power production during the period in MWh. \r\nMust be non-negative. \r\n \r\n            \r\nThe unit is MWh.\r\nThis means that if this baseline interval covers\r\nthe period 08:00 to 08:30 and has a EnergyConsumption of 10 (MWh),\r\nthe actual energy produced during the entire interval is\r\n10MWh, and the average power consumption is 20MW.",
            "format": "double"
          },
          "energyConsumption": {
            "type": "number",
            "description": "Total power consumption during the period in MWh. \r\nMust be non-negative. \r\n \r\n            \r\nThe unit is MWh.\r\nThis means that if this baseline interval covers\r\nthe period 08:00 to 08:30 and has a EnergyConsumption of 10 (MWh),\r\nthe actual energy usage during the entire interval is\r\n10MWh, and the average power consumption is 20MW.",
            "format": "double"
          },
          "averagePowerConsumption": {
            "type": "number",
            "description": "Average power consumption in MW.\r\nMust be non-negative.",
            "format": "double"
          },
          "averagePowerProduction": {
            "type": "number",
            "description": "Average power production in MW \r\nMust be non-negative.",
            "format": "double"
          }
        },
        "additionalProperties": true,
        "description": "BaseLineInterval covers a fixed interval in time, e.g. one minute from 15:00 to 15:01 on a specific date. Dates are always UTC and should always be sent and parsed as ISO-8856-1 with the UTC time zone reference, 'Z', to avoid ambiguity. Each interval specifies at least one of the four energy/power values"
      },
      "BaseLineIntervalSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseLineInterval"
            },
            "nullable": false
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": false,
            "readOnly": true
          }
        },
        "additionalProperties": true
      },
      "AssetPortfolio": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this item",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": false
          }
        },
        "additionalProperties": true
      },
      "AssetPortfolioSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPortfolio"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": true
      },
      "TreeNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": false,
            "readOnly": true
          },
          "parentId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreeNode"
            },
            "nullable": false,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MeterReading": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this item",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Item creation timestamp",
            "format": "date-time",
            "nullable": true
          },
          "createdByUserId": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "description": "Item modification timestamp",
            "format": "date-time",
            "nullable": true
          },
          "lastModifiedByUserId": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          },
          "assetPortfolioId": {
            "type": "string",
            "nullable": true
          },
          "assetId": {
            "type": "string",
            "nullable": true
          },
          "assetGridAssignmentId": {
            "type": "string",
            "nullable": true
          },
          "periodFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "periodTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "batchReference": {
            "type": "string",
            "nullable": true
          },
          "energyProduction": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "energyConsumption": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "averagePowerConsumption": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "averagePowerProduction": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MeterReadingSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterReading"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this item",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Item creation timestamp",
            "format": "date-time",
            "nullable": true
          },
          "createdByUserId": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "description": "Item modification timestamp",
            "format": "date-time",
            "nullable": true
          },
          "lastModifiedByUserId": {
            "type": "string",
            "nullable": true
          },
          "completionType": {
            "enum": [
              "Filled",
              "Killed",
              "Cancelled",
              "Expired",
              "Rejected"
            ],
            "type": "string",
            "description": "For closed/inactive orders, this field indicates why/how\r\nthe order was closed.",
            "nullable": true
          },
          "ownerOrganizationId": {
            "type": "string",
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "description": "The timestamp at which this order becomes active/tradable.  \r\nDefaults to current date time.\r\nSupport for future orders not currently implemented.",
            "format": "date-time",
            "nullable": true
          },
          "validTo": {
            "type": "string",
            "description": "The timestamp this order expires / becomes inactive. \r\nMust be before PeriodTo.",
            "format": "date-time",
            "nullable": true
          },
          "gridNodeId": {
            "type": "string",
            "description": "The grid node this order applies to. \r\nCalculated and validated for sell orders.\r\nRequired for buy orders.",
            "nullable": true
          },
          "marketId": {
            "type": "string",
            "description": "Reference to the market.",
            "nullable": true
          },
          "assetPortfolioId": {
            "type": "string",
            "description": "The asset portfolio for which this order applies.  \r\nRequired on create for sell orders.\r\nNot updateable.",
            "nullable": true
          },
          "supplierOrganizationId": {
            "type": "string",
            "description": "For sell orders, this field is set to the SupplierOrganizationId of the asset portfolio.\r\nFor buy orders, this is used to a make a buy-order directed towards a specific BRP.",
            "nullable": true
          },
          "side": {
            "enum": [
              "Buy",
              "Sell"
            ],
            "type": "string",
            "description": "Direction of order - buy or sell sell.\r\nRequired on create.\r\nNot updateable.",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "nullable": true
          },
          "fillType": {
            "enum": [
              "Normal",
              "FillAndKill",
              "FillOrKill"
            ],
            "type": "string",
            "nullable": true
          },
          "regulationType": {
            "enum": [
              "Up",
              "Down"
            ],
            "type": "string",
            "nullable": true
          },
          "priceType": {
            "enum": [
              "Limit",
              "Market",
              "PayAsCleared"
            ],
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "The amount of power or energy being sold.\r\n            \r\nUnit: Mega watt, or MW, or MWh/h. \r\n\r\nFor Power, it denotes the max (in absolute terms) power\r\nconsumption/production during that period.\r\n            \r\nFor Energy, it denotes the energy available during the specified\r\nperiod. The unit is still MW, thus the length of the interval needs\r\nto be taken into account to calculate the actual energy usage/production.",
            "format": "double",
            "nullable": true
          },
          "minimumQuantity": {
            "type": "number",
            "description": "The order will not be partially filled lower than the minimum quantity.",
            "format": "double",
            "nullable": true
          },
          "flexMarginPrice": {
            "type": "number",
            "description": "The marginal price of the flexibility. \r\nWhen posting flexibility sell orders, this price represents\r\n the actual income while RebalancePrice will have to be paid\r\n back to the BRP (at least for some FSPs).\r\n \r\nAlso known as: Premium, ReservationPrice\r\nThe price is pr unit (MWh)",
            "format": "double",
            "nullable": true
          },
          "rebalancePrice": {
            "type": "number",
            "description": "The cost of rebalancing the energy bought.\r\nDefaults (and restricted) to 0 for Energy markets,\r\n and for buy orders.\r\nOnly applies to power markets.\r\n\r\nAlso known as: ActivationPrice\r\nThe price is pr unit (MWh).",
            "format": "double",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "description": "Sum of FlexMarginPrice and RebalancePrice.\r\nThe price is pr unit (MWh).",
            "format": "double",
            "nullable": true
          },
          "originalOrderId": {
            "type": "string",
            "description": "For split orders, this is a reference the originally placed order.",
            "nullable": true
          },
          "originalQuantity": {
            "type": "number",
            "description": "Quantity specified when placing the order.\r\nFor split orders this value is not set.",
            "format": "double",
            "nullable": true
          },
          "quantityCompleted": {
            "type": "number",
            "description": "Quantity filled or killed.",
            "format": "double",
            "nullable": true
          },
          "targetOrganizationId": {
            "type": "string",
            "description": "If set, the order is only visible and tradeable for this organization.",
            "nullable": true
          },
          "visibility": {
            "enum": [
              "Public",
              "Private",
              "DsoAndTso"
            ],
            "type": "string",
            "nullable": true
          },
          "blockSizeInSeconds": {
            "type": "integer",
            "description": "Required on create?, not updateable.\r\nMust be a multiplum of the markets minimum\r\nisp size.",
            "format": "int32",
            "nullable": true
          },
          "minBlocks": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxBlocks": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "adjacentBlocks": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "restBlocks": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "periodFrom": {
            "type": "string",
            "description": "The timestamp indicating the start of the interval for which this order applies.",
            "format": "date-time",
            "nullable": true
          },
          "periodTo": {
            "type": "string",
            "description": "The timestamp indicating the end of the interval for which this order applies.",
            "format": "date-time",
            "nullable": true
          },
          "longFlexContractId": {
            "type": "string",
            "description": "Reference to the longflex contract.",
            "nullable": true
          },
          "assetTypeId": {
            "type": "string",
            "nullable": true
          },
          "renewableType": {
            "enum": [
              "Renewable",
              "NonRenewable",
              "Mixed"
            ],
            "type": "string",
            "description": "Not required for buy orders.\r\nDerivable from the asset(portfolio)s for sell orders.",
            "nullable": true
          },
          "minRampUpRate": {
            "type": "number",
            "description": "Minimum rate of change when upregulating.\r\n            \r\nUnit: MW/min - mega watts pr second.\r\n            \r\nNote that this is the Up ramp rate, corresponding to\r\nUp regulation / increased production.\r\nFor Up-regulating orders, this indicates the how fast an asset\r\nshould start power production / reducing consumption.",
            "format": "float",
            "nullable": true
          },
          "maxRampUpRate": {
            "type": "number",
            "description": "Maximum rate of change when upregulating.\r\n            \r\nUnit: MW/min - mega watts pr second.\r\n            \r\nNote that this is the Up rate, corresponding to\r\nUp regulation / increased production.\r\nFor Up-regulating orders, this indicates the how fast an asset\r\nshould start power production / reducing consumption.",
            "format": "float",
            "nullable": true
          },
          "minRampDownRate": {
            "type": "number",
            "description": "Minimum rate of change when downregulating.\r\n            \r\nUnit: MW/min - mega watts pr second.\r\n            \r\nNote that this is the Down ramp rate, corresponding to\r\nDown regulation / increased production.\r\nFor Down-regulating orders, this indicates the how fast an asset\r\nshould stop power production / increase consumption.",
            "format": "float",
            "nullable": true
          },
          "maxRampDownRate": {
            "type": "number",
            "description": "Maximum rate of change when downregulating.\r\n            \r\nUnit: MW/min - mega watts pr second.\r\n            \r\nNote that this is the Down ramp rate, corresponding to\r\nDown regulation / increased production.\r\nFor Down-regulating orders, this indicates the how fast an asset\r\nshould stop power production / increase consumption.",
            "format": "float",
            "nullable": true
          },
          "quantityType": {
            "enum": [
              "Power",
              "Energy",
              "ReactivePower"
            ],
            "type": "string",
            "description": "The quantity type of this order - power or energy. \r\nRequired on create, not updateable.\r\nDerivable from market.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          },
          "customProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "targetOrderId": {
            "type": "string",
            "nullable": true
          },
          "ownerSubscriptionTypes": {
            "type": "array",
            "items": {
              "enum": [
                "NodesOperator",
                "TSO",
                "DSO",
                "FSP",
                "BRP",
                "Agent"
              ],
              "type": "string"
            },
            "description": "Distinct subscription types of the owner organization.\r\nThis data is used by the matching service to match on visibility (DSO/TSO) for longflex orders.",
            "nullable": true
          },
          "sysStartTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sysEndTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": " LimitOrder vs MarketOrder - don't have prices .\r\n            \r\nNOTE: What happens when an order is partially met?\r\n does the met order disappear and a new order\r\n gets created? Or is the order updated with the\r\n new reduced quantity?"
      },
      "OrderSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Trade": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "enum": [
              "Received",
              "Pending",
              "Rejected",
              "Active",
              "Inactive",
              "Completed",
              "Deleted"
            ],
            "type": "string",
            "description": "Status for this item",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Item creation timestamp",
            "format": "date-time",
            "nullable": true
          },
          "createdByUserId": {
            "type": "string",
            "nullable": true
          },
          "lastModified": {
            "type": "string",
            "description": "Item modification timestamp",
            "format": "date-time",
            "nullable": true
          },
          "lastModifiedByUserId": {
            "type": "string",
            "nullable": true
          },
          "marketId": {
            "type": "string",
            "description": "Reference to the market.",
            "nullable": true
          },
          "dealId": {
            "type": "string",
            "description": "Reference to the deal.",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Reference to the order.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "Quantity traded/filled.",
            "format": "double",
            "nullable": true
          },
          "ownerOrganizationId": {
            "type": "string",
            "description": "Reference to the order's owner organization.",
            "nullable": true
          },
          "supplierOrganizationId": {
            "type": "string",
            "description": "This field is set to the SupplierOrganizationId of the sell order.",
            "nullable": true
          },
          "side": {
            "enum": [
              "Buy",
              "Sell"
            ],
            "type": "string",
            "nullable": true
          },
          "rebalancePrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "periodFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "periodTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "gridNodeId": {
            "type": "string",
            "nullable": true
          },
          "assetPortfolioId": {
            "type": "string",
            "nullable": true
          },
          "regulationType": {
            "enum": [
              "Up",
              "Down"
            ],
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          },
          "customProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": true
      },
      "TradeSearchResult": {
        "type": "object",
        "properties": {
          "numberOfHits": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trade"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
